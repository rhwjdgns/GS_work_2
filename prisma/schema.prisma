// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userId Int @id @default(autoincrement()) @map("userId")
  email String @unique @map("email")
  password String @map("password")
  passwordCheck String @map("passwordCheck")
  name String @map ("name")

  Characters Characters[]
  UserCharInventory UserCharInventory[]
  UserCharItems UserCharItems[]

  @@map ("Users")
}

model Characters {
  CharacterId Int @id @default(autoincrement()) @map("CharacterId")
  UserId Int @map("UserId")
  name String @map("name")
  health Int @map("health")
  power Int @map("power")
  money Int @map("money")

  User Users @relation(fields: [UserId], references: [userId], onDelete: Cascade)

  @@map("Character")
}

model UserCharInventory {
  UserCharInventoryId Int @id @default(autoincrement()) @map("UserCharInventoryId")
  UserId Int @map("UserId")
  UserCharacterId Int @map("UserCharacterId")

  User Users @relation(fields: [UserId], references: [userId], onDelete: Cascade)
  

  @@map("UserCharInventory")
}

model UserCharItems {
  UserCharItemsId Int @id @default(autoincrement()) @map("UserCharItemsId")
  UserId Int @map("UserId")
  UserCharInventoryId Int @map("UserCharInventoryId")

  User Users @relation(fields: [UserId], references: [userId], onDelete: Cascade)

  @@map("UserCharItems")
}

model Items {
  item_code Int @id @default(autoincrement()) @map("item_code")
  item_name String @map("item_name")
  item_stat Json @map("item_stat")
  item_price Int @map("item_price")

  @@map("Items")
}